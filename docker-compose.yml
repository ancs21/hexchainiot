version: '2'

services:
  # blockchain hyperlegler sawtooth 1.1.5
  settings-tp:
    image: hyperledger/sawtooth-settings-tp:1.1
    container_name: sawtooth-settings-tp-default
    restart: unless-stopped
    depends_on:
      - validator
    entrypoint: settings-tp -vv -C tcp://validator:4004

  intkey-tp-python:
    image: hyperledger/sawtooth-intkey-tp-python:1.1
    container_name: sawtooth-intkey-tp-python-default
    restart: unless-stopped
    depends_on:
      - validator
    entrypoint: intkey-tp-python -vv -C tcp://validator:4004

  validator:
    image: hyperledger/sawtooth-validator:1.1
    container_name: sawtooth-validator-default
    restart: unless-stopped
    expose:
      - 4004
    ports:
      - '4004:4004'
    entrypoint: "bash -c \"\
      sawadm keygen && \
      sawtooth keygen my_key && \
      sawset genesis -k /root/.sawtooth/keys/my_key.priv && \
      sawadm genesis config-genesis.batch && \
      sawtooth-validator -vv \
      --endpoint tcp://validator:8800 \
      --bind component:tcp://eth0:4004 \
      --bind network:tcp://eth0:8800 \
      --bind consensus:tcp://eth0:5050 \
      \""
  devmode-engine:
    image: hyperledger/sawtooth-devmode-engine-rust:1.1
    container_name: sawtooth-devmode-engine-rust-default
    restart: unless-stopped
    depends_on:
      - validator
    entrypoint: devmode-engine-rust -C tcp://validator:5050

  rest-api:
    image: hyperledger/sawtooth-rest-api:1.1
    container_name: sawtooth-rest-api-default
    restart: unless-stopped
    ports:
      - '8008:8008'
    depends_on:
      - validator
    entrypoint: sawtooth-rest-api -C tcp://validator:4004 --bind rest-api:8008

  shell:
    image: hyperledger/sawtooth-all:1.1
    container_name: sawtooth-shell-default
    restart: unless-stopped
    depends_on:
      - rest-api
    entrypoint: "bash -c \"\
      sawtooth keygen && \
      tail -f /dev/null \
      \""

  # graphql server
  timescale:
    image: timescale/timescaledb:latest-pg10
    container_name: timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: Iaminevitable
    volumes:
      - db_data_1111:/var/lib/postgresql/data
  grafana:
    image: grafana/grafana:5.1.0
    container_name: grafana
    ports:
      - 3003:3000
    depends_on:
      - 'timescale'

  webhookauth:
    image: hexchainiot/webhook-auth
    container_name: webhook-auth
    restart: unless-stopped

  graphql-engine:
    image: hasura/graphql-engine
    container_name: graphql-server
    ports:
      - '8085:8080'
    depends_on:
      - 'timescale'
      - 'webhookauth'
    restart: unless-stopped
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:Iaminevitable@timescale:5432/postgres
      HASURA_GRAPHQL_ACCESS_KEY: Iamironman
      HASURA_GRAPHQL_AUTH_HOOK: http://webhookauth:6677/firebase/webhook
    command:
      - graphql-engine
      - serve
      - --enable-console

  # custom blockchain
  hexchain-tp:
    image: hexchainiot/tp
    container_name: hexchainiot-tp
    restart: unless-stopped
    depends_on:
      - 'validator'
  hexchain-ledger-sync:
    image: hexchainiot/ledger-pub
    container_name: hexchainiot-ledger-pub
    restart: unless-stopped
    depends_on:
      - 'validator'

  device-api:
    image: hexchainiot/device-api
    container_name: device-api
    restart: unless-stopped
    ports:
      - '8888:8888'

  # pub/sub
  deepstream:
    image: deepstreamio/deepstream.io:3.2.1
    container_name: deepstream
    restart: unless-stopped
    ports:
      - '6020:6020'
      - '6021:6021'
    volumes:
      - ./conf:/etc/deepstream/
  # sync db
  sync-db:
    image: hexchainiot/sync-db
    container_name: sync-db
    restart: unless-stopped

volumes:
  db_data_1111:
