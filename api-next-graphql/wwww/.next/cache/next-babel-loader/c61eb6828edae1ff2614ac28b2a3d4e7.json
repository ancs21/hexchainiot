{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Cookie from 'js-cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './init-apollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, _ctx$ctx, req, res, apollo, appProps, apolloState;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return Cookie.get('token');\n                    }\n                  });\n                  ctx.ctx.apolloClient = apollo;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  if (!(res && res.finished)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 10:\n                  if (!(typeof window === 'undefined')) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  _context.prev = 11;\n                  _context.next = 14;\n                  return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                    apolloClient: apollo\n                  })));\n\n                case 14:\n                  _context.next = 19;\n                  break;\n\n                case 16:\n                  _context.prev = 16;\n                  _context.t0 = _context[\"catch\"](11);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 19:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 20:\n                  // Extract query data from the Apollo's store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 22:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[11, 16]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props)); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return Cookie.get('token');\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData('HexchainIoT')\"), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/home/xadmin/Desktop/hexchain/hexchainiot/api-next-graphql/wwww/lib/with-apollo-client.js"],"names":["React","Cookie","PropTypes","getDataFromTree","Head","initApollo","App","ctx","AppTree","req","res","apollo","getToken","get","apolloClient","appProps","getInitialProps","finished","window","console","error","rewind","apolloState","cache","extract","props","Component","object","isRequired"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAM+BC,GAN/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQMC,kBAAAA,OARN,GAUQD,GAVR,CAQMC,OARN,aAUQD,GAVR,CASMA,GATN,EASaE,GATb,YASaA,GATb,EASkBC,GATlB,YASkBA,GATlB;AAWUC,kBAAAA,MAXV,GAWmBN,UAAU,CACvB,EADuB,EAEvB;AACEO,oBAAAA,QAAQ,EAAE;AAAA,6BAAMX,MAAM,CAACY,GAAP,CAAW,OAAX,CAAN;AAAA;AADZ,mBAFuB,CAX7B;AAkBIN,kBAAAA,GAAG,CAACA,GAAJ,CAAQO,YAAR,GAAuBH,MAAvB;AAEII,kBAAAA,QApBR,GAoBmB,EApBnB;;AAAA,uBAqBQT,GAAG,CAACU,eArBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAsBuBV,GAAG,CAACU,eAAJ,CAAoBT,GAApB,CAtBvB;;AAAA;AAsBMQ,kBAAAA,QAtBN;;AAAA;AAAA,wBAyBQL,GAAG,IAAIA,GAAG,CAACO,QAzBnB;AAAA;AAAA;AAAA;;AAAA,mDA4Ba,EA5Bb;;AAAA;AAAA,wBA+BQ,OAAOC,MAAP,KAAkB,WA/B1B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAoCcf,eAAe,CAAC,oBAAC,OAAD,eAAaY,QAAb;AAAuB,oBAAA,YAAY,EAAEJ;AAArC,qBAAD,CApC7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsCQ;AACA;AACA;AACAQ,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AAzCR;AA4CM;AACA;AACAhB,kBAAAA,IAAI,CAACiB,MAAL;;AA9CN;AAiDI;AACMC,kBAAAA,WAlDV,GAkDwBX,MAAM,CAACY,KAAP,CAAaC,OAAb,EAlDxB;AAAA,qEAqDST,QArDT;AAsDMO,oBAAAA,WAAW,EAAXA;AAtDN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA0DE,sBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN,GADiB,CAEjB;AACA;;AACA,YAAKX,YAAL,GAAoBT,UAAU,CAACoB,KAAK,CAACH,WAAP,EAAoB;AAChDV,QAAAA,QAAQ,EAAE,oBAAM;AACd,iBAAOX,MAAM,CAACY,GAAP,CAAW,OAAX,CAAP;AACD;AAH+C,OAApB,CAA9B;AAJiB;AASlB;;AAnEH;AAAA;AAAA,+BAqEW;AACP,eAAO,oBAAC,GAAD;AAAK,UAAA,YAAY,EAAE,KAAKC;AAAxB,WAA0C,KAAKW,KAA/C,EAAP;AACD;AAvEH;;AAAA;AAAA,IAA8BzB,KAAK,CAAC0B,SAApC,2GAEqB;AACjBJ,IAAAA,WAAW,EAAEpB,SAAS,CAACyB,MAAV,CAAiBC;AADb,GAFrB;AAyED,CA1ED","sourcesContent":["import React from 'react'\nimport Cookie from 'js-cookie'\nimport PropTypes from 'prop-types'\nimport { getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\n\nimport initApollo from './init-apollo'\n\nexport default App => {\n  return class WithData extends React.Component {\n    static displayName = `WithData('HexchainIoT')`\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps(ctx) {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => Cookie.get('token')\n        }\n      )\n\n      ctx.ctx.apolloClient = apollo\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {}\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />)\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo's store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return Cookie.get('token')\n        }\n      })\n    }\n\n    render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}