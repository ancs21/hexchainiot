{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Cookie from 'js-cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './init-apollo';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      const apollo = initApollo({}, {\n        getToken: () => Cookie.get('token')\n      });\n      ctx.ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n            apolloClient: apollo\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo's store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return Cookie.get('token');\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(App, _extends({\n        apolloClient: this.apolloClient\n      }, this.props));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData('HexchainIoT')`), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/home/xadmin/Desktop/hexchain/hexchainiot/api-next-graphql/wwww/lib/with-apollo-client.js"],"names":["React","Cookie","PropTypes","getDataFromTree","Head","initApollo","App","WithData","Component","getInitialProps","ctx","AppTree","req","res","apollo","getToken","get","apolloClient","appProps","finished","window","error","console","rewind","apolloState","cache","extract","constructor","props","render","object","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AAM5C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,YAAM;AACJC,QAAAA,OADI;AAEJD,QAAAA,GAAG,EAAE;AAAEE,UAAAA,GAAF;AAAOC,UAAAA;AAAP;AAFD,UAGFH,GAHJ;AAIA,YAAMI,MAAM,GAAGT,UAAU,CACvB,EADuB,EAEvB;AACEU,QAAAA,QAAQ,EAAE,MAAMd,MAAM,CAACe,GAAP,CAAW,OAAX;AADlB,OAFuB,CAAzB;AAOAN,MAAAA,GAAG,CAACA,GAAJ,CAAQO,YAAR,GAAuBH,MAAvB;AAEA,UAAII,QAAQ,GAAG,EAAf;;AACA,UAAIZ,GAAG,CAACG,eAAR,EAAyB;AACvBS,QAAAA,QAAQ,GAAG,MAAMZ,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD;;AAED,UAAIG,GAAG,IAAIA,GAAG,CAACM,QAAf,EAAyB;AACvB;AACA;AACA,eAAO,EAAP;AACD;;AAED,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA;AACA,YAAI;AACF;AACA,gBAAMjB,eAAe,CAAC,oBAAC,OAAD,eAAae,QAAb;AAAuB,YAAA,YAAY,EAAEJ;AAArC,aAAD,CAArB;AACD,SAHD,CAGE,OAAOO,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAXgC,CAajC;AACA;;;AACAjB,QAAAA,IAAI,CAACmB,MAAL;AACD,OAzC+B,CA2ChC;;;AACA,YAAMC,WAAW,GAAGV,MAAM,CAACW,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKR,QADL;AAEEM,QAAAA;AAFF;AAID;;AAEDG,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN,EADiB,CAEjB;AACA;;AACA,WAAKX,YAAL,GAAoBZ,UAAU,CAACuB,KAAK,CAACJ,WAAP,EAAoB;AAChDT,QAAAA,QAAQ,EAAE,MAAM;AACd,iBAAOd,MAAM,CAACe,GAAP,CAAW,OAAX,CAAP;AACD;AAH+C,OAApB,CAA9B;AAKD;;AAEDa,IAAAA,MAAM,GAAG;AACP,aAAO,oBAAC,GAAD;AAAK,QAAA,YAAY,EAAE,KAAKZ;AAAxB,SAA0C,KAAKW,KAA/C,EAAP;AACD;;AAvE2C,GAA9C,yCACwB,yBADxB,wCAEqB;AACjBJ,IAAAA,WAAW,EAAEtB,SAAS,CAAC4B,MAAV,CAAiBC;AADb,GAFrB;AAyED,CA1ED","sourcesContent":["import React from 'react'\nimport Cookie from 'js-cookie'\nimport PropTypes from 'prop-types'\nimport { getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\n\nimport initApollo from './init-apollo'\n\nexport default App => {\n  return class WithData extends React.Component {\n    static displayName = `WithData('HexchainIoT')`\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps(ctx) {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => Cookie.get('token')\n        }\n      )\n\n      ctx.ctx.apolloClient = apollo\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {}\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />)\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo's store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return Cookie.get('token')\n        }\n      })\n    }\n\n    render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}